Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-09-08T19:33:14+10:00

====== Chunk Generator ======

Every instance needs a chunk generator. Luckily, they can be easily created by extending the ChunkGenerator class.

An example of this can be seen below:

--------------------
public class TestGenerator implements ChunkGenerator {

	private Random random = new Random();
	private JNoise jNoise = JNoise.newBuilder().perlin().setInterpolation(InterpolationType.LINEAR).setSeed(random.nextInt()).setFrequency(0.4).build();

	public int getHeight(int x, int z) {
		double preHeight = jNoise.getNoise(((double) x) / 16.0, ((double) z) / 16.0);
		return (int) ((preHeight > 0 ? preHeight * 6 : preHeight * 4) + 64);
	}

	@Override
	public void generateChunkData(ChunkBatch batch, int chunkX, int chunkZ) {
		for (int x = 0; x < Chunk.CHUNK_SIZE_X; x++) {
			for (int z = 0; z < Chunk.CHUNK_SIZE_Z; z++) {
				final int height = getHeight(x + chunkX * 16, z + chunkZ * 16);
				for (int y = 0; y < height; y++) {
					if (y == 0) {
						batch.setBlock(x, y, z, Block.BEDROCK);
					} else if (y == height - 1) {
						batch.setBlock(x, y, z, Block.GRASS_BLOCK);
					} else if (y > height - 7) {
						// Data for debugging purpose
						SerializableData serializableData = new SerializableDataImpl();
						serializableData.set("test", 55, Integer.class);
						batch.setBlockStateId(x, y, z, Block.DIRT.getBlockId(), serializableData);
					} else {
						batch.setBlock(x, y, z, Block.STONE);
					}
				}
				if (height < 61) {
					batch.setBlock(x, height - 1, z, Block.DIRT);
					for (int y = 0; y < 61 - height; y++) {
						batch.setBlock(x, y + height, z, Block.WATER);
					}
				}
			}
		}
	}
}--------------------

We have ChunkGenerator#generateChunkData which is called once for all chunk, the batch is then executed and the chunk packet sent to all nearby players.

==== Populators ====

Populators can also be specified, they are executed after the chunk generator as a way to "populate" the world (trees, structures, etc...)

Example of a tree populator:

--------------------
public class TestGenerator implements ChunkGenerator  {

	private Random random = new Random();
	private TreePopulator treeGen = new TreePopulator();

	@Override
	public void generateChunkData(ChunkBatch batch, int chunkX, int chunkZ) {
		for (int x = 0; x < Chunk.CHUNK_SIZE_X; x++) {
			for (int z = 0; z < Chunk.CHUNK_SIZE_Z; z++) {
				for (int y = 0; y < 64; y++) {
					batch.setBlock(x, y, z, Block.STONE);
				}
			}
		}
	}
	private class TreePopulator implements ChunkPopulator {

		final Structure tree;

		public TreePopulator() {
			tree = new Structure();
			tree.addBlock(Block.DIRT, 0, -1, 0);
			tree.addBlock(Block.OAK_LOG, 0, 0, 0);
			tree.addBlock(Block.OAK_LOG, 0, 1, 0);
			tree.addBlock(Block.OAK_LOG, 0, 2, 0);
			tree.addBlock(Block.OAK_LOG, 0, 3, 0);

			tree.addBlock(Block.OAK_LEAVES, 1, 1, 0);
			tree.addBlock(Block.OAK_LEAVES, 2, 1, 0);
			tree.addBlock(Block.OAK_LEAVES, -1, 1, 0);
			tree.addBlock(Block.OAK_LEAVES, -2, 1, 0);

			tree.addBlock(Block.OAK_LEAVES, 1, 1, 1);
			tree.addBlock(Block.OAK_LEAVES, 2, 1, 1);
			tree.addBlock(Block.OAK_LEAVES, 0, 1, 1);
			tree.addBlock(Block.OAK_LEAVES, -1, 1, 1);
			tree.addBlock(Block.OAK_LEAVES, -2, 1, 1);

			tree.addBlock(Block.OAK_LEAVES, 1, 1, 2);
			tree.addBlock(Block.OAK_LEAVES, 2, 1, 2);
			tree.addBlock(Block.OAK_LEAVES, 0, 1, 2);
			tree.addBlock(Block.OAK_LEAVES, -1, 1, 2);
			tree.addBlock(Block.OAK_LEAVES, -2, 1, 2);

			tree.addBlock(Block.OAK_LEAVES, 1, 1, -1);
			tree.addBlock(Block.OAK_LEAVES, 2, 1, -1);
			tree.addBlock(Block.OAK_LEAVES, 0, 1, -1);
			tree.addBlock(Block.OAK_LEAVES, -1, 1, -1);
			tree.addBlock(Block.OAK_LEAVES, -2, 1, -1);

			tree.addBlock(Block.OAK_LEAVES, 1, 1, -2);
			tree.addBlock(Block.OAK_LEAVES, 2, 1, -2);
			tree.addBlock(Block.OAK_LEAVES, 0, 1, -2);
			tree.addBlock(Block.OAK_LEAVES, -1, 1, -2);
			tree.addBlock(Block.OAK_LEAVES, -2, 1, -2);

			tree.addBlock(Block.OAK_LEAVES, 1, 2, 0);
			tree.addBlock(Block.OAK_LEAVES, 2, 2, 0);
			tree.addBlock(Block.OAK_LEAVES, -1, 2, 0);
			tree.addBlock(Block.OAK_LEAVES, -2, 2, 0);

			tree.addBlock(Block.OAK_LEAVES, 1, 2, 1);
			tree.addBlock(Block.OAK_LEAVES, 2, 2, 1);
			tree.addBlock(Block.OAK_LEAVES, 0, 2, 1);
			tree.addBlock(Block.OAK_LEAVES, -1, 2, 1);
			tree.addBlock(Block.OAK_LEAVES, -2, 2, 1);

			tree.addBlock(Block.OAK_LEAVES, 1, 2, 2);
			tree.addBlock(Block.OAK_LEAVES, 2, 2, 2);
			tree.addBlock(Block.OAK_LEAVES, 0, 2, 2);
			tree.addBlock(Block.OAK_LEAVES, -1, 2, 2);
			tree.addBlock(Block.OAK_LEAVES, -2, 2, 2);

			tree.addBlock(Block.OAK_LEAVES, 1, 2, -1);
			tree.addBlock(Block.OAK_LEAVES, 2, 2, -1);
			tree.addBlock(Block.OAK_LEAVES, 0, 2, -1);
			tree.addBlock(Block.OAK_LEAVES, -1, 2, -1);
			tree.addBlock(Block.OAK_LEAVES, -2, 2, -1);

			tree.addBlock(Block.OAK_LEAVES, 1, 2, -2);
			tree.addBlock(Block.OAK_LEAVES, 2, 2, -2);
			tree.addBlock(Block.OAK_LEAVES, 0, 2, -2);
			tree.addBlock(Block.OAK_LEAVES, -1, 2, -2);
			tree.addBlock(Block.OAK_LEAVES, -2, 2, -2);

			tree.addBlock(Block.OAK_LEAVES, 1, 3, 0);
			tree.addBlock(Block.OAK_LEAVES, -1, 3, 0);

			tree.addBlock(Block.OAK_LEAVES, 1, 3, 1);
			tree.addBlock(Block.OAK_LEAVES, 0, 3, 1);
			tree.addBlock(Block.OAK_LEAVES, -1, 3, 1);

			tree.addBlock(Block.OAK_LEAVES, 1, 3, -1);
			tree.addBlock(Block.OAK_LEAVES, 0, 3, -1);
			tree.addBlock(Block.OAK_LEAVES, -1, 3, -1);

			tree.addBlock(Block.OAK_LEAVES, 1, 4, 0);
			tree.addBlock(Block.OAK_LEAVES, 0, 4, 0);
			tree.addBlock(Block.OAK_LEAVES, -1, 4, 0);

			tree.addBlock(Block.OAK_LEAVES, 0, 4, 1);

			tree.addBlock(Block.OAK_LEAVES, 0, 4, -1);
			tree.addBlock(Block.OAK_LEAVES, -1, 4, -1);
		}

		@Override
		public void populateChunk(ChunkBatch batch, Chunk chunk) {
			for (int i = 1; i < random.nextInt(5); i++) {
				tree.build(batch, new BlockPosition(random.nextInt(16), 64, random.nextInt(16)));
			}
		}


	}
	@Override
	public void fillBiomes(Biome[] biomes, int chunkX, int chunkZ) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public List<ChunkPopulator> getPopulators() {
		// TODO Auto-generated method stub
		return null;
	}


}
--------------------
